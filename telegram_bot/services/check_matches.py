from django.utils import timezone
from matches.models import Match
from bets.models import Bet
from users.models import TelegramUser
from aiogram import Bot
from telegram_bot.config import TELEGRAM_BOT_TOKEN
from telegram_bot.time import format_datetime_ru
from django.db.models import F
from asgiref.sync import sync_to_async
from django.db import transaction
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def check_matches_and_notify():
    bot = Bot(token=TELEGRAM_BOT_TOKEN)
    try:
        now = timezone.now()
        finished_matches = await sync_to_async(list)(
            Match.objects.filter(is_finished=True, notified=False).prefetch_related('bets')
        )
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(finished_matches)} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

        for match in finished_matches:
            bets = await sync_to_async(list)(match.bets.all().select_related('option'))
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–æ–∫ –¥–ª—è –º–∞—Ç—á–∞ {match.team1} vs {match.team2}, –Ω–∞–π–¥–µ–Ω–æ {len(bets)} —Å—Ç–∞–≤–æ–∫")

            for bet in bets:
                try:
                    user = await sync_to_async(lambda: bet.user)()
                    if not user:
                        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Å—Ç–∞–≤–∫–∏ {bet.id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        continue

                    telegram_id = await sync_to_async(lambda: user.telegram_id)()
                    if not telegram_id:
                        logger.warning(f"telegram_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è user_id={user.id}")
                        continue

                    bet_option = await sync_to_async(lambda: bet.option.option)()
                    match_winner = await sync_to_async(lambda: match.winner)()

                    is_won = bet_option == match_winner
                    amount = await sync_to_async(lambda: bet.amount)()
                    coefficient = await sync_to_async(lambda: bet.option.get_coefficient())()

                    if coefficient is None:
                        logger.warning(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è BetOption {bet.option.id}")
                        continue

                    payout = amount * coefficient if is_won else 0

                    await sync_to_async(
                        lambda: transaction.atomic(
                            Bet.objects.filter(id=bet.id).update(
                                is_won=is_won,
                                payout=payout
                            )
                        )
                    )()
                    formatted_time = format_datetime_ru(match.start_time)

                    if is_won:
                        await sync_to_async(
                            lambda: transaction.atomic(
                                TelegramUser.objects.filter(id=user.id).update(
                                    balance=F('balance') + payout
                                )
                            )
                        )()
                        message = (f"üéâ–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ —Å—ã–≥—Ä–∞–ª–∞.\n"
                                   f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –Ω–∞ –º–∞—Ç—á–µ: {match.team1} vs {match.team2}!\n"
                                   f"–î–∞—Ç–∞: {formatted_time}.\n"
                                   f"–í–∞—à –≤—ã–∏–≥—Ä—ã—à: {payout} üí∞")
                    else:
                        message = (f"üò¢–ö —Å–æ–∂–µ–ª–µ–Ω–∏—é –≤–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –Ω–µ —Å—ã–≥—Ä–∞–ª–∞.\n"
                                   f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –Ω–∞ –º–∞—Ç—á–µ: {match.team1} vs {match.team2}.\n"
                                   f"–î–∞—Ç–∞: {formatted_time}.\n"
                                   f"–ñ–µ–ª–∞–µ–º —É–¥–∞—á–∏ –≤ —Å–ª–µ–¥–µ—â–µ–º —Ä–∞–∑—ÉüçÄ")

                    await bot.send_message(chat_id=telegram_id, text=message)
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è user_id={getattr(user, 'id', 'unknown')}: {e}")
                    continue

            match.notified = True
            await sync_to_async(match.save)()
            logger.info(f"–ú–∞—Ç—á {match.team1} vs {match.team2} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã–π")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_matches_and_notify: {e}")

    finally:
        await bot.session.close()
        logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
