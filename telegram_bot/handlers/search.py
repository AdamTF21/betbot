from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from telegram_bot.api.search import search_matches
from telegram_bot.states.search import SearchStates
from telegram_bot.time import format_datetime_ru


router = Router()


@router.callback_query(F.data == "search_matches")
async def ask_for_search_query(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ üîç:")
    await state.set_state(SearchStates.waiting_for_query)
    await callback.answer()

@router.message(SearchStates.waiting_for_query)
async def perform_search(message: Message, state: FSMContext):
    query = message.text

    try:
        results = await search_matches(query)
    except Exception:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–∞—Ç—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return

    if not results:
        await message.answer("‚ùå –ú–∞—Ç—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        for match in results:
            formatted_time = format_datetime_ru(match['start_time'])

            text = (
                f"<b>{match['team1']} vs {match['team2']}</b>\n\n"
                f"üìä <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:</b>\n"
                f"‚ñ´ {match['team1']}: {match['odds_team1']}\n"
                f"‚ñ´ {match['team2']}: {match['odds_team2']}\n"
                f"‚ñ´ –ù–∏—á—å—è: {match.get('odds_draw', '‚Äî')}\n\n"
                f"üìà <b>–®–∞–Ω—Å—ã:</b>\n"
                f"‚ñ´ {match['team1']}: {match['chance_team1']}%\n"
                f"‚ñ´ {match['team2']}: {match['chance_team2']}%\n"
                f"‚ñ´ –ù–∏—á—å—è: {match.get('chance_draw', '‚Äî')}%\n"
                f"üïì –ù–∞—á–∞–ª–æ: {formatted_time}"
            )

            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="üî• –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É",
                            callback_data=f"match_{match['id']}"
                        )
                    ]
                ]
            )

            await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    await state.clear()


